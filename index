<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receipt Breakdown</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .section {
            border: 1px solid #ccc;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .input-group {
            margin-bottom: 10px;
        }
        input, select, button {
            padding: 5px;
            margin: 5px;
        }
        #peopleList span {
            display: inline-block;
            margin: 5px;
            padding: 5px;
            background-color: #f0f0f0;
            border-radius: 3px;
        }
        .item-row {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        .item-info {
            flex: 2;
        }
        .item-assignment {
            flex: 3;
            min-width: 200px;
        }
        #breakdown {
            margin-top: 20px;
        }
        button {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="section">
        <h2>Other People Involved</h2>
        <div class="input-group">
            <input type="text" id="personName" placeholder="Enter name">
            <button onclick="addPerson()">Add Person</button>
        </div>
        <div id="peopleList"></div>
    </div>

    <div class="section">
        <h2>Receipt Items</h2>
        <div class="input-group">
            <input type="text" id="itemName" placeholder="Item name">
            <input type="number" id="itemCost" placeholder="Cost" step="0.01">
            <button onclick="addOrUpdateItem()">Add Item</button>
        </div>
        <div id="itemsList"></div>
    </div>

    <div class="section">
        <h2>Breakdown</h2>
        <div id="breakdown"></div>
    </div>

    <script>
        let people = ["Me"];
        let items = [];
        let editingIndex = -1;

        function addPerson() {
            const nameInput = document.getElementById('personName');
            const name = nameInput.value.trim();
            
            if (name && !people.includes(name)) {
                people.push(name);
                updatePeopleDisplay();
                updateItemsDisplay();
                nameInput.value = '';
            }
        }

        function updatePeopleDisplay() {
            const peopleList = document.getElementById('peopleList');
            peopleList.innerHTML = people.filter(p => p !== "Me").map(name => 
                `<span>${name}</span>`
            ).join('');
        }

        function addOrUpdateItem() {
            const nameInput = document.getElementById('itemName');
            const costInput = document.getElementById('itemCost');
            const name = nameInput.value.trim();
            const cost = parseFloat(costInput.value);

            if (name && cost > 0) {
                if (editingIndex === -1) {
                    items.push({
                        name: name,
                        cost: cost,
                        assignedTo: []
                    });
                } else {
                    items[editingIndex] = {
                        ...items[editingIndex],
                        name: name,
                        cost: cost
                    };
                    editingIndex = -1;
                }
                updateItemsDisplay();
                calculateTotal();
                nameInput.value = '';
                costInput.value = '';
            }
        }

        function updateItemsDisplay() {
            const itemsList = document.getElementById('itemsList');
            itemsList.innerHTML = items.map((item, index) => `
                <div class="item-row">
                    <div class="item-info">
                        ${item.name} - $${item.cost.toFixed(2)}
                    </div>
                    <div class="item-assignment">
                        <select multiple onchange="updateAssignment(${index}, this)" 
                            title="Select people to split with">
                            ${getAssignmentOptions(item.assignedTo)}
                        </select>
                    </div>
                    <div>
                        <button onclick="editItem(${index})">Edit</button>
                    </div>
                </div>
            `).join('');
        }

        function getAssignmentOptions(currentSelection) {
            const allOptions = ['Everyone', 'Me', ...people.filter(p => p !== "Me")];
            return allOptions.map(option => `
                <option value="${option}" ${currentSelection.includes(option) ? 'selected' : ''}>
                    ${option}
                </option>
            `).join('');
        }

        function updateAssignment(index, selectElement) {
            const selected = Array.from(selectElement.selectedOptions).map(o => o.value);
            items[index].assignedTo = selected;
            calculateTotal();
        }

        function editItem(index) {
            const item = items[index];
            document.getElementById('itemName').value = item.name;
            document.getElementById('itemCost').value = item.cost;
            editingIndex = index;
            document.querySelector('button').textContent = 'Update Item';
        }

        function calculateTotal() {
            const breakdown = document.getElementById('breakdown');
            const totals = {};
            
            people.filter(p => p !== "Me").forEach(person => {
                totals[person] = 0;
            });

            items.forEach(item => {
                let recipients = [];
                
                if (item.assignedTo.includes("Everyone")) {
                    recipients = people;
                } else {
                    recipients = item.assignedTo;
                }

                const validRecipients = recipients.filter(r => r !== "Me");
                if (validRecipients.length > 0) {
                    const share = item.cost / recipients.length;
                    validRecipients.forEach(person => {
                        totals[person] += share;
                    });
                }
            });

            breakdown.innerHTML = Object.entries(totals).map(([person, total]) => `
                <div>${person} owes: $${total.toFixed(2)}</div>
            `).join('');
        }

        // Initialize display
        updatePeopleDisplay();
    </script>
</body>
</html>
